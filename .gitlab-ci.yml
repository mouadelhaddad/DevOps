# This file is a template, and might need editing before it works on your project.
# Official framework image. Look for the different tagged releases at:
# https://hub.docker.com/r/library/python
image: python:latest

# Pick zero or more services to be used on all builds.
# Only needed when using a docker container to run your tests in.
# Check out: http://docs.gitlab.com/ee/ci/docker/using_docker_images.html#what-is-a-service
services:
  - postgres:latest

variables:
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: postgres
  POSTGRES_ENABLED: "true"
  POSTGRES_DB: postgres

# This is a basic example for a gem or script which doesn't use
# services such as redis or postgres


# To get Django tests to work you may need to create a settings file using
# the following DATABASES:
#
# DATABASES = {
#     'default': {
#        'ENGINE': 'django.db.backends.postgresql_psycopg2',
#        'NAME': 'ci',
#        'USER': 'postgres',
#        'PASSWORD': 'postgres',
#        'HOST': 'postgres',
#        'PORT': '5432',
#    },
# }
#
# and then adding `--settings app.settings.ci` (or similar) to the test command
stages:
  - test
  - build
  - deploy

test:
  stage: test
  before_script:
    - python -V  # Print out python version for debugging
  # Uncomment next line if your Django app needs a JS runtime:
  # - apt-get update -q && apt-get install nodejs -yqq
    - pip install -r requirements.txt
  script:
    - export DATABASE_URL=postgres://postgres:@postgres:5432/$CI_ENVIRONMENT_SLUG
    - python manage.py makemigrations
    - python manage.py migrate
    - python manage.py test

deploy:
  stage: deploy
  script :
    - sudo apt install docker-compose
    - docker-compose up

include:
  - template: Jobs/Build.gitlab-ci.yml
