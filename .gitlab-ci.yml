# Gitlab CI yml file
# GitLab CI uses the services keyword to define what docker containers should be linked with your base image. Since we are using docker as our image we'll be using docker:dind i.e. Docker-In-Docker-Image
services:
- docker:dind

# Since we are using Alpine, everything is not installed by default.
# Thus we are setting up the basics

# Environemt Variable for docker:dind service explaining to use overlay2 as supporting driver for docker
variables:
  DOCKER_DRIVER: overlay2
  DOCKER_HOST : tcp://localhost:2375
  DOCKER_TLS_CERTDIR: ""

# This is the major part of the code which explains the stages present in our pipeline.
# In a django application we have various stages which include testing, packing the code,
# performing migrations, collecting static files and running the application.
# The various stages are broadly classified into 3 main categories:

# 1. Test       2. Release      3. Deploy

stages:
- test
- build
- deploy

# Stage I
# Testing Phase:
# This is where the main code is tested.
# Other options like code coverage, etc are also written in this phase
test:
  stage: test
  # This repo includes python3, pip3 and postgres so that I need not
  # setup python and postgres separately.
  image: python:latest
  before_script:
    # Installing requirements
    - apk update && apk upgrade && apk add --no-cache bash openssh
    - pip install -r requirements.txt
  variables:
    # Connecting to testDB
    POSTGRES_DB: postgres
    POSTGRES_USER: postgres
    POSTGRES_PASSWORD: postgres
    POLLSAPI_PG_HOST: postgres
  services:
    - postgres:latest
  script:
    # Command to test our application
    - python manage.py test

deploy:
  stage: deploy
  image: Alpine 
  script :
    - apk add sudo 
    - sudo apt install docker-compose
    - docker-compose up

include:
  - template: Jobs/Build.gitlab-ci.yml
